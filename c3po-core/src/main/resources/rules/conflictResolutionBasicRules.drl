package c3po.basic

import java.util.List
import java.util.Set

import com.petpet.c3po.api.model.Element
import com.petpet.c3po.api.model.helper.MetadataRecord
import com.petpet.c3po.api.model.helper.MetadataRecord.Status
import com.petpet.c3po.api.model.Source
import com.petpet.c3po.adaptor.rules.drools.LogCollector
import com.petpet.c3po.dao.MetadataSorter

global com.petpet.c3po.adaptor.rules.drools.ConflictCollector conflictcollector;
global com.petpet.c3po.adaptor.rules.drools.LogCollector logger;
global java.lang.Integer loglevel;


/**
 * This rule checks if there exists a property, marked as conflicting, that has
 * no more other properties that provoke the conflict. 
 * If no conflicting properties are found, the status is set to "SINGLE_RESULT"
 * and all (in fact non-)conflicting records are merged together.
 *
 * This rule has a high priority, so whenever we see a property is conflicting, 
 * there must be at least one property with a conflicting value.
 */
rule "Single value, no more Conflict - Resolution"
        salience 999
    when 
        $e : Element()

        $md1 : MetadataRecord(
            status==Status.CONFLICT.toString()
        ) from $e.metadata

        Number( intValue == 0 ) from accumulate( $m : MetadataRecord( 
                property.id == $md1.property.id,
                value != $md1.value
            ) from $e.metadata;
                count($m)
        )

        $mdsSame : List() from accumulate( $m : MetadataRecord( 
                this != $md1, 
                property.id == $md1.property.id,
                value == $md1.value
            ) from $e.metadata;
                collectList($m)
        )

    then
        logger.log(loglevel, "no more conflicts on "+$md1.getProperty().getId());
        
        $md1.setStatus(Status.SINGLE_RESULT.toString());
        modify($e) {
            mergeMetadata($md1, $mdsSame)
        }
        logger.log(loglevel, "    -> merge and set status to Single Result!");
end

/**
 * ATTENTION: This rule is "dangerous": It would be great to have, because it would/could make other rules easier, 
 *            BUT: the database only holds one source per value if the property is conflicting, so merging them
 *                 results in effective loss of data!
 *            As long as this is not "fixed" in the database, this rule needs a second one, that splits up datarecords
 *            with multiple sources when the element has conflicts on that property! 
 *
 *
 * This rule checks if there exist two distinct properties, marked as conflicting, that in fact use the same value. 
 * If two conflicting properties are found, the two are merged (in fact their sources are merged).
 *
 * This rule has a high priority, so whenever we see a property is conflicting, there must be a second property of different value!
 * 
 *
rule "Same value without Conflict - Merging"
        salience 998
    when
        $e : Element()

        $md1 : MetadataRecord(
            status==Status.CONFLICT.toString()
        ) from $e.metadata

        $mdsSame : List(size > 0) from accumulate( $m : MetadataRecord( 
                this != $md1, 
                property.id == $md1.property.id,
                value == $md1.value
            ) from $e.metadata;
                collectList($m)
        )

    then
        logger.log(loglevel,"merging conflicting records with same value on "+$md1.getProperty().getId() );
        
        modify ($e) {
            mergeMetadata($md1, $mdsSame)
        }
        logger.log(loglevel, "    -> merge!");
end
/**/

/**
 * This rule effectively creates knowledge to the database, because the backend only stores one value per conflicting data record.
 * That knowledge is lost, so we create separate records for each source to keep the data in the database.
 *
 * This rule further reverts the merging rule above, so it must not mark the element as modified to avoid cylces (and unnecessary 
 * reevaluation of other rules! 
 */
rule "Record in conflict with several sources"
        salience 1
    when
        $e : Element()

        $md : MetadataRecord(
            status==Status.CONFLICT.toString()
        ) from $e.metadata
        
        Number( intValue > 1) from accumulate( 
            $id: String() from $md.sources;
            count( $id )
        )
        

    then
        logger.log(loglevel,"splitting conflicting record with more than one source on "+$md.getProperty().getId() );
        
        logger.logMetadataRecord(loglevel, $md);
        
        $e.splitMetadata($md);
        
        logger.log(loglevel, "    -> split sources!");
end
/**/


/**
 * REPORT Rules
 */

rule "REPORT: element with conflicts"
        salience 0
    when 
        $e : Element()

        $conflicts : Set() from collect(
            MetadataRecord(
                status==Status.CONFLICT.toString()
            ) from $e.metadata
        )
        
    then
        logger.log(LogCollector.INFO, "Report: "+$e.getUid()+" has conflicts: ");
        
        java.util.SortedSet<MetadataRecord> sorted = 
            new java.util.TreeSet<MetadataRecord>(MetadataSorter.getInstance());
        sorted.addAll((Set<MetadataRecord>)$conflicts);
        for(MetadataRecord conflict : sorted) {
            logger.logMetadataRecord(LogCollector.INFO, conflict);           
            conflictcollector.addConflict(conflict.getProperty().getId(), $e);
        }
        retract($e);

end

rule "REPORT: element without conflicts"
        salience 0
    when 
        $e : Element()
        
        Number( intValue == 0 ) from accumulate(
            $m : MetadataRecord( 
                status==Status.CONFLICT.toString()
            ) from $e.metadata;
                count($m)
        )
        
    then
        logger.log(loglevel, "Report: "+$e.getUid()+" has no conflicts");
        retract($e);
end
